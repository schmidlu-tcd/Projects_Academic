#include <stdio.h>
#include <stdlib.h>

Tree_Node *new_Node(char c)
{
  Tree_Node *temp = (Tree_Node*)malloc(sizeof(Tree_Node));
  temp->Data = c;
  temp->left = NULL;
  temp->right = NULL;
  return temp;
}

Tree_Node* tree_search(Tree_Node* root, char data)
{
  if(root == NULL){
    return NULL;
  }
  if(data == root->Data)
  {
    return root;
  }
  else if(root == NULL)
  {
    return NULL;
  }
  else if(data < root->Data)
  {
    tree_search(root->left, data);
  }
  else if(data > root->Data)
  {
    tree_search(root->right, data);
  }
}

void tree_insert(Tree_Node** root, char data)
{
  if(data <= (*root)->Data)
  {
    if((*root)->left == NULL)
    {
      (*root)->left = new_Node(data);
    }
    else
    {
      tree_insert(&(*root)->left, data);
    }
  }
  else if(data > (*root)->Data)
  {
    if((*root)->right == NULL)
    {
      (*root)->right = new_Node(data);
    }
    else
    {
      tree_insert(&(*root)->right, data);
    }
  }
}

Tree_Node* create_bst (char data[])
{
  int i = 1;

  Tree_Node **root = (Tree_Node**)malloc(sizeof(Tree_Node));

  (*root) = new_Node(data[0]);
  
  while(data[i] != '\0')
  {
    tree_insert(root, data[i]);
    i++;
  }
  return (*root);
}

void tree_print_sorted(Tree_Node* root)
{
  if(root->left == NULL)
  {
    printf("%c", root->Data);
  }
  else
  {
    tree_print_sorted(root->left);
    printf("%c", root->Data);
  }
  if(root->right != NULL)
  {
    tree_print_sorted(root->right);
  }
}

void tree_delete(Tree_Node* root)
{
  if(root != NULL)
  {
    tree_delete(root->left);
    root->left = NULL;
    tree_delete(root->right);
    root->right = NULL;
    free(root);
  }
}



//TEMPORARY MAIN() START
int main()
{
  char array[] = {'F','L','O','C','C','I','N','A','U','C','I','N','I','H','I','L','I','P','I','L','I','F','I','C','A','T','I','O','N','\0'};
 Tree_Node *root = create_bst(array);
  tree_print_sorted(root);

  if(tree_search(root, 'F') == NULL)
  {
    printf("\n%C not in tree", 'F');
  }
  else
  {
    printf("\n%C in tree", 'F');
  }

  if(tree_search(root, 'H') == NULL)
  {
    printf("\n%C not in tree", 'H');
  }
  else
  {
    printf("\n%C in tree", 'H');
  }

  tree_delete(root);

  if(tree_search(root, 'F') == NULL)
  {
    printf("\n%C not in tree", 'F');
  }
  else
  {
    printf("\n%C in tree", 'F');
  }

  if(tree_search(root, 'H') == NULL)
  {
    printf("\n%C not in tree", 'H');
  }
  else
  {
    printf("\n%C in tree", 'H');
  }

  return 0;
}
//TEMPORARY MAIN() END